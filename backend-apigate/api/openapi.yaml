openapi: 3.0.3
info:
  title: Bulletin Board API
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
paths:
  /users/register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '201':
          description: User registered successfully
          headers:
            Set-Cookie:
              $ref: '#/components/headers/SetRefreshToken'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: Conflict - User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/login:
    post:
      summary: Log in a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              required: ["Set-Cookie"]
              $ref: '#/components/headers/SetRefreshToken'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        "401":
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /token/refresh:
    post:
      summary: Refresh access token.
      description: No request body. Refresh token is sent via HttpOnly cookie.
      security:
        - refreshCookie: []
      operationId: refreshToken
      responses:
        '200':
          description: Token refreshed successfully
          headers:
            Set-Cookie:
              $ref: '#/components/headers/SetRefreshToken'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        "401":
          description: Unauthorized - Invalid or expired refresh token
  /posts:
    get:
      summary: Get all posts
      operationId: getPosts
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new post
      operationId: createPost
      # JWT認証を必要とするエンドポイント
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "401":
          description: Unauthorized - Invalid or missing access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UserRegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        username:
          type: string
          example: 'newuser'
        email:
          type: string
          format: email
          example: 'admin@example.com'
          x-go-type: string
        password:
          type: string
          format: password
          example: 'strongpassword123'
    UserLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: 'admin@example.com'
          x-go-type: string
        password:
          type: string
          format: password
          example: 'strongpassword123'
    AccessToken:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
        title:
          type: string
          example: 'My First Post'
        content:
          type: string
          example: 'This is the content of the post.'
        # 投稿にユーザーIDを追加
        user_id:
          type: string
          format: uuid
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
          example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
        created_at:
          type: string
          format: date-time
          example: '2025-07-07T10:00:00Z'

    NewPost:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          example: 'My New Post Title'
        content:
          type: string
          example: 'Content for the new post.'

    Error:
      type: object
      properties:
        message:
          type: string
  headers:
    SetRefreshToken:
      schema:
        type: string
        description: |
          JWT refresh token set in HttpOnly cookie.

  # JWT認証のセキュリティスキームを定義
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refreshCookie:
      type: apiKey
      in: cookie
      name: refresh_token
